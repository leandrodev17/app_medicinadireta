import 'dart:convert';

import 'package:medicinadireta/modules/patient_information/submodules/anamnese/domain/entities/anamnese.dart';

import '../../../../../../core/models/profissional/profissional.dart';

AnamneseExt anamneseExtFromMap(String str) => AnamneseExt.fromMap(json.decode(str));

String anamneseExtToMap(AnamneseExt data) => json.encode(data.toMap());

class AnamneseExt extends Anamnese {
  const AnamneseExt({
    super.id,
    super.usuarioId,
    super.pacienteId,
    super.dataUtc,
    super.dataSrv,
    super.dataLocal,
    super.dataEvento,
    super.utcEvento,
    super.codigoTitulo,
    super.titulo,
    super.descricao,
    super.motivoAtendimento,
    super.descricaoHda,
    super.descricaoHpp,
    super.descricaoHabito,
    super.descricaoVicio,
    super.historicoMental,
    super.historicoFamiliar,
    super.outros,
    super.justificaRetroativo,
    super.fonteInformacao,
    super.triagem,
    super.terminologiaQueixaPrincipal,
    super.descricaoQueixaPrincipal,
    super.codigoQueixaPrincipal,
    super.editavel,
    super.ativado,
    super.atendimentoId,
    super.profissional,
  });

  AnamneseExt copyWith({
    int? id,
    int? usuarioId,
    int? pacienteId,
    String? dataUtc,
    String? dataSrv,
    String? dataLocal,
    String? dataEvento,
    String? utcEvento,
    String? codigoTitulo,
    String? titulo,
    String? descricao,
    String? motivoAtendimento,
    String? descricaoHda,
    String? descricaoHpp,
    String? descricaoHabito,
    String? descricaoVicio,
    String? historicoMental,
    String? historicoFamiliar,
    String? outros,
    String? justificaRetroativo,
    String? fonteInformacao,
    String? triagem,
    String? terminologiaQueixaPrincipal,
    String? descricaoQueixaPrincipal,
    String? codigoQueixaPrincipal,
    String? editavel,
    String? ativado,
    int? atendimentoId,
    Profissional? profissional,
  }) =>
      AnamneseExt(
        id: id ?? this.id,
        usuarioId: usuarioId ?? this.usuarioId,
        pacienteId: pacienteId ?? this.pacienteId,
        dataUtc: dataUtc ?? this.dataUtc,
        dataSrv: dataSrv ?? this.dataSrv,
        dataLocal: dataLocal ?? this.dataLocal,
        dataEvento: dataEvento ?? this.dataEvento,
        utcEvento: utcEvento ?? this.utcEvento,
        codigoTitulo: codigoTitulo ?? this.codigoTitulo,
        titulo: titulo ?? this.titulo,
        descricao: descricao ?? this.descricao,
        motivoAtendimento: motivoAtendimento ?? this.motivoAtendimento,
        descricaoHda: descricaoHda ?? this.descricaoHda,
        descricaoHpp: descricaoHpp ?? this.descricaoHpp,
        descricaoHabito: descricaoHabito ?? this.descricaoHabito,
        descricaoVicio: descricaoVicio ?? this.descricaoVicio,
        historicoMental: historicoMental ?? this.historicoMental,
        historicoFamiliar: historicoFamiliar ?? this.historicoFamiliar,
        outros: outros ?? this.outros,
        justificaRetroativo: justificaRetroativo ?? this.justificaRetroativo,
        fonteInformacao: fonteInformacao ?? this.fonteInformacao,
        triagem: triagem ?? this.triagem,
        terminologiaQueixaPrincipal: terminologiaQueixaPrincipal ?? this.terminologiaQueixaPrincipal,
        descricaoQueixaPrincipal: descricaoQueixaPrincipal ?? this.descricaoQueixaPrincipal,
        codigoQueixaPrincipal: codigoQueixaPrincipal ?? this.codigoQueixaPrincipal,
        editavel: editavel ?? this.editavel,
        ativado: ativado ?? this.ativado,
        atendimentoId: atendimentoId ?? this.atendimentoId,
        profissional: profissional ?? this.profissional,
      );

  factory AnamneseExt.fromMap(Map<String, dynamic> json) => AnamneseExt(
        id: json["id"],
        usuarioId: json["usuarioId"],
        pacienteId: json["pacienteId"],
        dataUtc: json["dataUTC"],
        dataSrv: json["dataSRV"],
        dataLocal: json["dataLocal"],
        dataEvento: json["dataEvento"],
        utcEvento: json["utcEvento"],
        codigoTitulo: json["codigoTitulo"],
        titulo: json["titulo"],
        descricao: json["descricao"],
        motivoAtendimento: json["motivoAtendimento"],
        descricaoHda: json["descricaoHda"],
        descricaoHpp: json["descricaoHpp"],
        descricaoHabito: json["descricaoHabito"],
        descricaoVicio: json["descricaoVicio"],
        historicoMental: json["historicoMental"],
        historicoFamiliar: json["historicoFamiliar"],
        outros: json["outros"],
        justificaRetroativo: json["justificaRetroativo"],
        fonteInformacao: json["fonteInformacao"],
        triagem: json["triagem"],
        terminologiaQueixaPrincipal: json["terminologiaQueixaPrincipal"],
        descricaoQueixaPrincipal: json["descricaoQueixaPrincipal"],
        codigoQueixaPrincipal: json["codigoQueixaPrincipal"],
        editavel: json["editavel"],
        ativado: json["ativado"],
        atendimentoId: json["atendimentoId"],
        profissional: json["profissional"] != null ? Profissional.fromMap(json["profissional"]) : null,
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "usuarioId": usuarioId,
        "pacienteId": pacienteId,
        "dataUTC": dataUtc,
        "dataSRV": dataSrv,
        "dataLocal": dataLocal,
        "dataEvento": dataEvento,
        "utcEvento": utcEvento,
        "codigoTitulo": codigoTitulo,
        "titulo": titulo,
        "descricao": descricao,
        "motivoAtendimento": motivoAtendimento,
        "descricaoHda": descricaoHda,
        "descricaoHpp": descricaoHpp,
        "descricaoHabito": descricaoHabito,
        "descricaoVicio": descricaoVicio,
        "historicoMental": historicoMental,
        "historicoFamiliar": historicoFamiliar,
        "outros": outros,
        "justificaRetroativo": justificaRetroativo,
        "fonteInformacao": fonteInformacao,
        "triagem": triagem,
        "terminologiaQueixaPrincipal": terminologiaQueixaPrincipal,
        "descricaoQueixaPrincipal": descricaoQueixaPrincipal,
        "codigoQueixaPrincipal": codigoQueixaPrincipal,
        "editavel": editavel,
        "ativado": ativado,
        "atendimentoId": atendimentoId,
        "profissional": profissional?.toMap(),
      };
}
