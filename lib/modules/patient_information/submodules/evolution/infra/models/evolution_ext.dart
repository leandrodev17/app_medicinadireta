import 'dart:convert';

import 'package:medicinadireta/core/models/profissional/profissional.dart';
import 'package:medicinadireta/modules/patient_information/submodules/evolution/domain/entities/evolution.dart';

EvolutionExt evolutionFromMap(String str) =>
    EvolutionExt.fromMap(json.decode(str));
String evolutionToMap(EvolutionExt data) => json.encode(data.toMap());

class EvolutionExt extends Evolution {
  const EvolutionExt({
    super.id,
    super.pacienteId,
    super.unidade,
    super.contactado,
    super.dataInclusao,
    super.status,
    super.dataAgenda,
    super.horaAgenda,
    super.dataAgendaUtc,
    super.localAgenda,
    super.historico,
    super.tipoEditor,
    super.idOcorrencias,
    super.cid,
    super.cidDescricao,
    super.tuss,
    super.tussDescricao,
    super.logUsuario,
    super.logDataInclusao,
    super.logDataAtualizacao,
    super.dataUtc,
    super.dataSrv,
    super.dataLocal,
    super.editavel,
    super.ativado,
    super.atendimentoId,
    super.profissional,
  });

  EvolutionExt copyWith({
    int? id,
    int? pacienteId,
    int? unidade,
    String? contactado,
    String? dataInclusao,
    String? status,
    String? dataAgenda,
    String? horaAgenda,
    String? dataAgendaUtc,
    String? localAgenda,
    String? historico,
    String? tipoEditor,
    String? idOcorrencias,
    String? cid,
    String? cidDescricao,
    String? tuss,
    String? tussDescricao,
    int? logUsuario,
    String? logDataInclusao,
    String? logDataAtualizacao,
    String? dataUtc,
    String? dataSrv,
    String? dataLocal,
    String? editavel,
    String? ativado,
    int? atendimentoId,
    Profissional? profissional,
  }) =>
      EvolutionExt(
        id: id ?? id,
        pacienteId: pacienteId ?? pacienteId,
        unidade: unidade ?? unidade,
        contactado: contactado ?? contactado,
        dataInclusao: dataInclusao ?? dataInclusao,
        status: status ?? status,
        dataAgenda: dataAgenda ?? dataAgenda,
        horaAgenda: horaAgenda ?? horaAgenda,
        dataAgendaUtc: dataAgendaUtc ?? dataAgendaUtc,
        localAgenda: localAgenda ?? localAgenda,
        historico: historico ?? historico,
        tipoEditor: tipoEditor ?? tipoEditor,
        idOcorrencias: idOcorrencias ?? idOcorrencias,
        cid: cid ?? cid,
        cidDescricao: cidDescricao ?? cidDescricao,
        tuss: tuss ?? tuss,
        tussDescricao: tussDescricao ?? tussDescricao,
        logUsuario: logUsuario ?? logUsuario,
        logDataInclusao: logDataInclusao ?? logDataInclusao,
        logDataAtualizacao: logDataAtualizacao ?? logDataAtualizacao,
        dataUtc: dataUtc ?? dataUtc,
        dataSrv: dataSrv ?? dataSrv,
        dataLocal: dataLocal ?? dataLocal,
        editavel: editavel ?? editavel,
        ativado: ativado ?? ativado,
        atendimentoId: atendimentoId ?? atendimentoId,
        profissional: profissional ?? profissional,
      );

  factory EvolutionExt.fromMap(Map<String, dynamic> json) => EvolutionExt(
        id: json["id"],
        pacienteId: json["pacienteId"],
        unidade: json["unidade"],
        contactado: json["contactado"],
        dataInclusao: json["dataInclusao"],
        status: json["status"],
        dataAgenda: json["dataAgenda"],
        horaAgenda: json["horaAgenda"],
        dataAgendaUtc: json["dataAgendaUTC"],
        localAgenda: json["localAgenda"],
        historico: json["historico"],
        tipoEditor: json["tipoEditor"],
        idOcorrencias: json["idOcorrencias"],
        cid: json["cid"],
        cidDescricao: json["cidDescricao"],
        tuss: json["tuss"] != "" ? json["tuss"] : null,
        tussDescricao: json["tussDescricao"],
        logUsuario: json["logUsuario"],
        logDataInclusao: json["logDataInclusao"],
        logDataAtualizacao: json["logDataAtualizacao"],
        dataUtc: json["dataUTC"],
        dataSrv: json["dataSRV"],
        dataLocal: json["dataLocal"],
        editavel: json["editavel"],
        ativado: json["ativado"],
        atendimentoId: json["atendimentoId"],
        profissional: json["profissional"] != null
            ? Profissional.fromMap(json["profissional"])
            : null,
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "pacienteId": pacienteId,
        "unidade": unidade,
        "contactado": contactado,
        "dataInclusao": dataInclusao,
        "status": status,
        "dataAgenda": dataAgenda,
        "horaAgenda": horaAgenda,
        "dataAgendaUTC": dataAgendaUtc,
        "localAgenda": localAgenda,
        "historico": historico,
        "tipoEditor": tipoEditor,
        "idOcorrencias": idOcorrencias,
        "cid": cid,
        "cidDescricao": cidDescricao,
        "tuss": tuss,
        "tussDescricao": tussDescricao,
        "logUsuario": logUsuario,
        "logDataInclusao": logDataInclusao,
        "logDataAtualizacao": logDataAtualizacao,
        "dataUTC": dataUtc,
        "dataSRV": dataSrv,
        "dataLocal": dataLocal,
        "editavel": editavel,
        "ativado": ativado,
        "atendimentoId": atendimentoId,
        "profissional": profissional?.toMap(),
      };
}
